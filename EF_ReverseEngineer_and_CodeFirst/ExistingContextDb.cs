// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace EF_ReverseEngineer_and_CodeFirst
{
    public partial class ExistingContextDb : DbContext
    {
        public ExistingContextDb()
        {
        }

        public ExistingContextDb(DbContextOptions<ExistingContextDb> options)
            : base(options)
        {
        }

        public virtual DbSet<InspectionTypes> InspectionTypes { get; set; }
        public virtual DbSet<Inspections> Inspections { get; set; }
        public virtual DbSet<Statuses> Statuses { get; set; }
        public virtual DbSet<Bike> Bikes { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=DESKTOP-B6NOSRV\\SQLEXPRESS;Initial Catalog=inspectionapidb;Integrated Security=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<InspectionTypes>(entity =>
            {
                entity.Property(e => e.InspectionName).HasMaxLength(20);
            });

            modelBuilder.Entity<Inspections>(entity =>
            {
                entity.HasIndex(e => e.InspectionTypeId, "IX_Inspections_InspectionTypeId");

                entity.Property(e => e.Comments).HasMaxLength(200);

                entity.Property(e => e.Status).HasMaxLength(20);

                entity.HasOne(d => d.InspectionType)
                    .WithMany(p => p.Inspections)
                    .HasForeignKey(d => d.InspectionTypeId);
            });

            modelBuilder.Entity<Statuses>(entity =>
            {
                entity.Property(e => e.StatusOption).HasMaxLength(20);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}